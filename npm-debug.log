0 info it worked if it ends with ok
1 verbose cli [ '/Users/owen/.nvm/v0.10.28/bin/node',
1 verbose cli   '/Users/owen/.nvm/v0.10.28/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/owen/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
12 verbose folder .
13 info prepublish hoist-js@0.0.7-pre
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/owen/.npm/1f1177db-tar.lock
16 silly lockFile 87844778-49666-0-6426104211714119-tmp-tgz tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
17 verbose lock tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz /Users/owen/.npm/87844778-49666-0-6426104211714119-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 87844778-49666-0-6426104211714119-tmp-tgz tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
21 silly lockFile 87844778-49666-0-6426104211714119-tmp-tgz tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
22 verbose tar unpack /var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
23 silly lockFile 7a74570b-n-npm-hoist-js-0-0-7-pre-package tar:///Users/owen/.npm/hoist-js/0.0.7-pre/package
24 verbose lock tar:///Users/owen/.npm/hoist-js/0.0.7-pre/package /Users/owen/.npm/7a74570b-n-npm-hoist-js-0-0-7-pre-package.lock
25 silly lockFile 87844778-49666-0-6426104211714119-tmp-tgz tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
26 verbose lock tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz /Users/owen/.npm/87844778-49666-0-6426104211714119-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry LICENSE
32 silly gunzTarPerm extractEntry Gruntfile.js
33 silly gunzTarPerm extractEntry index.js
34 silly gunzTarPerm extractEntry build/hoist.js
35 silly gunzTarPerm extractEntry build/hoist.min.js
36 silly gunzTarPerm extractEntry build/hoist.min.pre.js
37 silly gunzTarPerm extractEntry .jshintignore
38 silly gunzTarPerm extractEntry bower.json
39 silly gunzTarPerm extractEntry .gitattributes
40 silly gunzTarPerm extractEntry circle.yml
41 silly gunzTarPerm extractEntry .editorconfig
42 silly gunzTarPerm extractEntry testrunner.html
43 silly gunzTarPerm extractEntry npm-shrinkwrap.json
44 silly gunzTarPerm extractEntry .jsbeautifyrc
45 silly gunzTarPerm extractEntry src/hoist.js
46 silly gunzTarPerm extractEntry testrunner-vanilla.html
47 silly gunzTarPerm extractEntry tests/blob.shim.js
48 silly gunzTarPerm extractEntry tests/test.node.js
49 silly gunzTarPerm extractEntry tests/test.requirejs.js
50 silly gunzTarPerm extractEntry tests/auth/auth_api_specs.js
51 silly gunzTarPerm extractEntry tests/data/data_api_specs.js
52 silly gunzTarPerm extractEntry tests/file/file_api_specs.js
53 silly gunzTarPerm extractEntry tests/index.html
54 silly gunzTarPerm extractEntry tests/notify/notify_api_specs.js
55 silly gunzTarPerm extractEntry tests/replies/64square.png
56 silly lockFile 7a74570b-n-npm-hoist-js-0-0-7-pre-package tar:///Users/owen/.npm/hoist-js/0.0.7-pre/package
57 silly lockFile 7a74570b-n-npm-hoist-js-0-0-7-pre-package tar:///Users/owen/.npm/hoist-js/0.0.7-pre/package
58 silly lockFile 87844778-49666-0-6426104211714119-tmp-tgz tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
59 silly lockFile 87844778-49666-0-6426104211714119-tmp-tgz tar:///var/folders/31/pvhszmld3g337stsx3vc8csc0000gn/T/npm-20752-AuLEDWiQ/1405314249666-0.6426104211714119/tmp.tgz
60 silly lockFile 3a52ce78- .
61 silly lockFile 3a52ce78- .
62 silly publish { name: 'hoist-js',
62 silly publish   version: '0.0.7-pre',
62 silly publish   description: 'Client Side Library for Hoist (hoistapps.com)',
62 silly publish   homepage: 'http://hoistapps.com',
62 silly publish   scripts: { test: 'grunt test', bower: 'bower install' },
62 silly publish   repository: { type: 'git', url: 'https://github.com/hoist/hoist-js' },
62 silly publish   author: { name: 'Hoist Apps Ltd' },
62 silly publish   license:
62 silly publish    [ { type: 'MIT',
62 silly publish        url: 'https://github.com/hoist/hoist-js/blob/master/LICENSE' } ],
62 silly publish   bugs: { url: 'https://github.com/hoist/hoist-js/issues' },
62 silly publish   dependencies: { superagent: '^0.18.0' },
62 silly publish   devDependencies:
62 silly publish    { archiver: '~0.4.8',
62 silly publish      bower: '~1.2.6',
62 silly publish      chai: '^1.9.1',
62 silly publish      'chai-as-promised': '^4.1.1',
62 silly publish      glob: '^4.0.3',
62 silly publish      grunt: '~0.4.1',
62 silly publish      'grunt-bower-task': '~0.3.2',
62 silly publish      'grunt-browserify': '^2.1.2',
62 silly publish      'grunt-compare-size': '~0.4.0-rc.3',
62 silly publish      'grunt-contrib-connect': '~0.3.0',
62 silly publish      'grunt-contrib-jshint': '*',
62 silly publish      'grunt-contrib-uglify': '^0.5.0',
62 silly publish      'grunt-contrib-watch': '~0.5.2',
62 silly publish      'grunt-mocha-phantomjs': '*',
62 silly publish      'grunt-mocha-test': '^0.11.0',
62 silly publish      'load-grunt-tasks': '^0.6.0',
62 silly publish      mocha: '~1.12.0',
62 silly publish      'mocha-phantomjs': '~3.1.1',
62 silly publish      nock: '^0.40.0',
62 silly publish      phantomjs: '*',
62 silly publish      requirejs: '~2.1.8',
62 silly publish      sinon: '^1.10.2',
62 silly publish      'time-grunt': '^0.3.2' },
62 silly publish   readme: '#Hoist Javascript Library\n\n[ ![Codeship Status for hoist/hoist-js](https://www.codeship.io/projects/895113a0-e485-0131-80ca-6ab1ceb1153c/status)](https://www.codeship.io/projects/25615)\n\n##Setting the api key\n\nThe library must be given the api key for your application before any other actions are performed. This can be done in either of the following ways:\n\n\tHoist.apiKey(apiKey);\n\tHoist.config("apiKey", apiKey);\n\nWhen your app is hosted on Hoist (as even-cushion.app.hoi.io, say), it has an endpoint /settings which knows the api key and the current environment. To read from the endpoint and set the Hoist config automatically, you can simply call\n\n\tHoist.config(…)\n\nproviding a callback as discussed below. You may find it useful to create a json file called settings in your development environment to mimic this behaviour.\n\nYou might want to be able to talk to multiple Hoist applications. In this case, you should call `Hoist.clone()` and set the api key for the new copy:\n\n\tvar OtherHoist = Hoist.clone();\n\tOtherHoist.apiKey(otherApiKey);\n\n##Callback syntax\n\nCalls to the Hoist api are by nature asynchronous. All methods provided by the client library take a `success` callback (which will be called with the response passed as the first argument). an `error` callback (which will be called with an error message), and an optional value to be used as the `context` when these functions are called.\n\nThe raw XMLHttpRequest object is always passed as the second argument, if you\'re into that sort of thing.\n\nIn the api methods listed below, the argument list can be terminated with any of the following:\n\n- `success, error, context`\n- `success, error`\n- `success, context`\n- `success`\n- &#248;\n\nAny method that takes these callbacks will also return a Promises/A+ conforming promise. (If for some strange reason you are mixing these two conventions, the callback in the argument will be called before any callbacks attached to the promise.)\n\n##Identity\n\nUse `Hoist.status(…)` to check whether the user is logged in:\n\n\tHoist.status(function (user) {\n\t\tconsole.log("Logged in as user with id " user.id);\n\t}, function () {\n\t\tconsole.log("Truly I tell you, I do not know you.");\n\t});\n\nTo log the user in or out or to create a new user, use the following, respectively:\n\n\tHoist.login({ email: "bob@invalid", password: "password"}, …)\n\tHoist.logout(…)\n\tHoist.signup({ email: "bob@invalid", password: "password"}, …)\n\nAfter any of these methods has been successfully called, the library will remember the user object returned. This can be accessed by calling `Hoist.user()`.\n\n###Social Signup/Login\n####To sign up new users with Google / Facebook\n\nPOST /user\n\t{"provider" : "facebook" | "google" }\n\nreturns\n\n\t{"redirectUrl": <some url> }\n\nYou should then redirect to that URL to complete the signup process; the user will then go to login / accept the\npermissions on the provider website (both services request access to the users Email Address).\n\nIf the user accepts the permissions then they will be redirected to the origin of the /user call with the query string ?create=true\nIf the user refuses, then it will redirect to the origin of the call with the query string ?create=false\n\nThey will be logged in on the return if successful\n\n####To login with Google / Facebook\n\nPOST /login\n\n\t{"provider" : "facebook" | "google" }\n\nreturns\n\n\t{"redirectUrl": <some url> }\n\nYou should then redirect to that Url\n\nThe user will then go to login / accept the permissions on the provider (both request access to the users Email Address)\n\nIf the user accepts the permissions then they will be redirected to the origin of the /user call with the query string ?login=true\nIf the user refuses then it will redirect to the orgin of the call with the query string ?login=false\n\nNOTE: You are expected to redirect from the /login or /user in a timely fashion as the redirect contains a time sensitive token.\n\n##Data\n\nThe data methods can be used in two ways. A "data manager" can be created by passing a model type to the Hoist\nfunction, and then the methods can be called on the resulting object:\n\n\tvar projects = Hoist("project");\n\n\t// get all projects\n\n\tprojects.get(function (data) {\n\t\tconsole.log("Got " + data.length + " projects");\n\t});\n\n\t// get a single project by id\n\n\tprojects.get(projectId, function (data) {\n\n\t});\n\n\t// save an object; the object returned will have an _id parameter.\n\t// anything passed to this method with an _id parameter will overwrite\n\t// the object with the given id.\n\n\t// You can post multiple objects by passing an array instead.\n\n\tprojects.post({\n\t\tname: "Cool Project",\n\t\tcoolness: "Very Cool"\n\t}, function (data) {\n\t\tconsole.log("Project " + data.name + " has been saved with id " + data._id);\n\t});\n\n\t// save an object by id\n\n\tprojects.post("cool-project", {\n\t\tname: "Cool Project",\n\t\tcoolness: "Super Cool"\n\t});\n\n\t// delete all projects\n\n\tprojects.clear(function () {\n\t\tconsole.log("No more projects.");\n\t});\n\n\t// delete a single project\n\n\tprojects.remove("cool-project", function () {\n\t\tconsole.log("no more cool project.");\n\t});\n\nA shorthand can be used if you have no need for the "data manager" pattern:\n\n\tHoist.get(modelType, id, …)\n\tHoist.post(modelType, id, data, …)\n\tHoist.post(modelType, data, …)\n\tHoist.clear(modelType, …)\n\tHoist.remove(modelType, id, …)\n\n### Queries\n\nThe query represented by a data manager can be made more specific by using LINQ-style method chaining to add\nwhere clauses, sorting and paging:\n\n\tHoist("article").limit(10).skip(50).get(…) // return at most 10 articles and skip the first 50\n\tHoist("person").sortBy("LastName", "FirstName asc").thenBy("DateOfBirth desc").get(…) // sort by properties\n\tHoist("person").where("LastName").equals("Morrison").get(…) // where clauses\n\nThe predicates supported in where clauses (like `equals` in the last example above) are as follows:\n\n- `equals`, `is` or `eq`: test equality\n- `notEquals`, `isnt`, `neq` or `ne`: not equal\n- `greaterThan` or `gt`: greater than\n- `atLeast`, `gte` or `ge`: greater than or equal\n- `lessThan` or `lt`: less than\n- `atMost`, `lte` or `le`: less than or equal\n- `elem` or `in`: test containment in an array\n- `notElem`, `notIn`, `nelem` or `nin`: test non-containment\n- `exists`: test property existence\n\nAt the moment the query manager object returned by these methods only supports the `get()` and `use()` methods.\n\n##File\n\nTo upload a file, call `Hoist.file(id, file, …)` with an id for the file, where `file` can be any of the following:\n\n- A `File` object\n- An HTML file input element\n- A jQuery wrapper HTML file input element\n- A `FormData` object (this must be in the format required by the Hoist api)\n\nTo retrieve a file, call `Hoist.file(id, …)`. The response will be a javascript `Blob` object.\n\n##Notifications\n\nTo send the notification with template id `id`, populated with the data `data`, use either of the following:\n\n\tHoist.notify(id, data, …)\n\tHoist.notify({id: id, data: data}, …)\n\n## Switching buckets\n\nHoist provides buckets to allow different members access to different data. When the member logs in, they\nstart out in the default bucket. Use the following method to list the buckets the current member has access to.\n\n\tHoist.bucket.list(…)\n\nUse one of the following to create a new bucket, with key `key` and attached metadata `meta`. The bucket created\nwill be owned by the current user.\n\n\tHoist.bucket.post(key, meta, …)\n\tHoist.bucket(key, meta, …)\n\nTo update the metadata of the bucket with a given key, call the following:\n\n\tHoist.bucket.meta(key, meta, …)\n\nTo set the current bucket, use one of\n\n\tHoist.bucket.set(key, …)\n\tHoist.bucket(key, …)\n\nwhere `key` is the key for the bucket that you want to enter, or `null` for the default bucket.\n\nTo check what bucket the member is currently in, use one of the following. The `success` callback will be called\nwith the current bucket if there is one; otherwise the `error` callback will be called.\n\n\tHoist.bucket.status(…)\n\tHoist.bucket(…)\n\nOnce you\'re in a bucket, you can use the following to set the metadata of the current bucket.\n\n\tHoist.bucket(meta, …)\n\nAfter the bucket is set or the status is checked, the library will remember the current bucket with its metadata.\nYou can simply call `Hoist.bucket()` to get it. (Note that calling `Hoist.bucket()` without arguments does not return a promised call to get the bucket status. You must use the long form `Hoist.bucket.status()` in this case.)\n\nFinally, to invite a user to the current bucket, do:\n\n\tHoist.bucket.invite({ "email": "boris@daspem.com" }, …)\n\nMany times it doesn\'t make sense to rely on state on the server to remember which bucket you\'re in. To get a\nHoist data manager whose calls are always scoped to a given bucket, use the `use()` method as in the following:\n\n\tvar bucketHoist = Hoist.use("my-bucket-key");\n\n\tbucketHoist.get(…); // works as above for Hoist.get\n\tbucketHoist.post(…);\n\tbucketHoist.clear(…);\n\tbucketHoist.remove(…);\n\n\tbucketHoist.meta(data, …); // post metadata against this bucket\n\tbucketHoist.enter(…);\n\n\tvar modelTypeManager = Hoist("model-type").use("bucket-key"); // or bucketHoist("model-type");\n\n\tmodelTypeManager.get(…); // work as above for data managers\n\tmodelTypeManager.post(…);\n\tmodelTypeManager.clear(…);\n\tmodelTypeManager.remove(…);\n\n## Aggregating data calls\n\nIf your project is of a decent size, you will probably find that on page load you are getting a bunch of models of\ndifferent types in a fairly straightforward fashion. Instead of nesting a bunch of callbacks, you can provide the\n`Hoist` function with a hash instead of a model type. For example, if you want to load all models of type "article"\nand "section", you can use:\n\n\tHoist({\n\t\tarticles: "article",\n\t\tsections: "section"\n\t}).get(function (data) {\n\t\tdoArticleStuff(data.articles);\n\t\tdoSectionStuff(data.sections);\n\t});\n\nSingle models can be retrieved in this way by setting the value in the hash to be the model type and the model id,s\neparated by a space:\n\n\tHoist.get({\n\t\tmembership: "membership 63688436-9bd4-4fc6-8c2c-ab3398ec2961",\n\t\tcompanies: "company"\n\t}, function (data) {\n\t\t// do the things\n\t});\n\nIf the type or id of one model being retrieved depends on the property of another, use square brackets to indicate\nthese dependencies, and the library will make sure to request the data in the right order, then swap out the tags\nbefore making the calls. You can also provide a string (accessible as `[id]`) or hash (accessible through its\nproperty names) as the first argument of the `get(…)` function as additional context. This allows things like:\n\n\tvar allData = Hoist({\n\t\tmembership: "membership [id]",\n\t\tcompany: "company [membership.companyId]",\n\t\temployees: "[company._id]-employee"\n\t});\n\n\tHoist.status(function (user) {\n\t\tallData.get(user, function (data) {\n\t\t  // do the things\n\t\t});\n\t});\n',
62 silly publish   readmeFilename: 'README.md',
62 silly publish   _id: 'hoist-js@0.0.7-pre',
62 silly publish   _shasum: '6b379bd95c8977fe0a56092d7035239432b07891',
62 silly publish   _from: '.' }
63 verbose url raw hoist-js
64 verbose url resolving [ 'https://registry.npmjs.org/', './hoist-js' ]
65 verbose url resolved https://registry.npmjs.org/hoist-js
66 info trying registry request attempt 1 at 17:04:09
67 http PUT https://registry.npmjs.org/hoist-js
68 http 403 https://registry.npmjs.org/hoist-js
69 verbose headers { date: 'Mon, 14 Jul 2014 05:04:11 GMT',
69 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
69 verbose headers   'content-type': 'application/json',
69 verbose headers   'cache-control': 'max-age=30',
69 verbose headers   'content-length': '17152',
69 verbose headers   'accept-ranges': 'bytes',
69 verbose headers   via: '1.1 varnish',
69 verbose headers   'x-served-by': 'cache-ak102-NZ',
69 verbose headers   'x-cache': 'MISS',
69 verbose headers   'x-cache-hits': '0',
69 verbose headers   'x-timer': 'S1405314250.186259,VS0,VE1521',
69 verbose headers   'keep-alive': 'timeout=10, max=50',
69 verbose headers   connection: 'Keep-Alive' }
70 error publish Failed PUT 403
71 error Error: forbidden cannot modify pre-existing version: 0.0.7-pre
71 error old={"name":"hoist-js","version":"0.0.7-pre","description":"Client Side Library for Hoist (hoistapps.com)","homepage":"http://hoistapps.com","scripts":{"test":"grunt test","bower":"bower install"},"repository":{"type":"git","url":"https://github.com/hoist/hoist-js"},"author":{"name":"Hoist Apps Ltd"},"license":[{"type":"MIT","url":"https://github.com/hoist/hoist-js/blob/master/LICENSE"}],"bugs":{"url":"https://github.com/hoist/hoist-js/issues"},"dependencies":{"superagent":"^0.18.0"},"devDependencies":{"archiver":"~0.4.8","bower":"~1.2.6","chai":"^1.9.1","chai-as-promised":"^4.1.1","glob":"^4.0.3","grunt":"~0.4.1","grunt-bower-task":"~0.3.2","grunt-browserify":"^2.1.2","grunt-compare-size":"~0.4.0-rc.3","grunt-contrib-connect":"~0.3.0","grunt-contrib-jshint":"*","grunt-contrib-uglify":"^0.5.0","grunt-contrib-watch":"~0.5.2","grunt-mocha-phantomjs":"*","grunt-mocha-test":"^0.11.0","load-grunt-tasks":"^0.6.0","mocha":"~1.12.0","mocha-phantomjs":"~3.1.1","nock":"^0.40.0","phantomjs":"*","requirejs":"~2.1.8","sinon":"^1.10.2","time-grunt":"^0.3.2"},"gitHead":"ea25bdf835a78ae4e9f54cb704912e5f8e901f90","_id":"hoist-js@0.0.7-pre","_shasum":"4f58460bc140cd1eec882679982c060eda7c6f4a","_from":".","_npmVersion":"1.4.18","_npmUser":{"name":"buildmaster","email":"owen@iouk.com"},"maintainers":[{"name":"buildmaster","email":"owen@iouk.com"}],"dist":{"shasum":"4f58460bc140cd1eec882679982c060eda7c6f4a","tarball":"http://registry.npmjs.org/hoist-js/-/hoist-js-0.0.7-pre.tgz"}}
71 error new={"name":"hoist-js","version":"0.0.7-pre","description":"Client Side Library for Hoist (hoistapps.com)","homepage":"http://hoistapps.com","scripts":{"test":"grunt test","bower":"bower install"},"repository":{"type":"git","url":"https://github.com/hoist/hoist-js"},"author":{"name":"Hoist Apps Ltd"},"license":[{"type":"MIT","url":"https://github.com/hoist/hoist-js/blob/master/LICENSE"}],"bugs":{"url":"https://github.com/hoist/hoist-js/issues"},"dependencies":{"superagent":"^0.18.0"},"devDependencies":{"archiver":"~0.4.8","bower":"~1.2.6","chai":"^1.9.1","chai-as-promised":"^4.1.1","glob":"^4.0.3","grunt":"~0.4.1","grunt-bower-task":"~0.3.2","grunt-browserify":"^2.1.2","grunt-compare-size":"~0.4.0-rc.3","grunt-contrib-connect":"~0.3.0","grunt-contrib-jshint":"*","grunt-contrib-uglify":"^0.5.0","grunt-contrib-watch":"~0.5.2","grunt-mocha-phantomjs":"*","grunt-mocha-test":"^0.11.0","load-grunt-tasks":"^0.6.0","mocha":"~1.12.0","mocha-phantomjs":"~3.1.1","nock":"^0.40.0","phantomjs":"*","requirejs":"~2.1.8","sinon":"^1.10.2","time-grunt":"^0.3.2"},"readme":"#Hoist Javascript Library\u000a\u000a[ ![Codeship Status for hoist/hoist-js](https://www.codeship.io/projects/895113a0-e485-0131-80ca-6ab1ceb1153c/status)](https://www.codeship.io/projects/25615)\u000a\u000a##Setting the api key\u000a\u000aThe library must be given the api key for your application before any other actions are performed. This can be done in either of the following ways:\u000a\u000a\u0009Hoist.apiKey(apiKey);\u000a\u0009Hoist.config(\"apiKey\", apiKey);\u000a\u000aWhen your app is hosted on Hoist (as even-cushion.app.hoi.io, say), it has an endpoint /settings which knows the api key and the current environment. To read from the endpoint and set the Hoist config automatically, you can simply call\u000a\u000a\u0009Hoist.config(…)\u000a\u000aproviding a callback as discussed below. You may find it useful to create a json file called settings in your development environment to mimic this behaviour.\u000a\u000aYou might want to be able to talk to multiple Hoist applications. In this case, you should call `Hoist.clone()` and set the api key for the new copy:\u000a\u000a\u0009var OtherHoist = Hoist.clone();\u000a\u0009OtherHoist.apiKey(otherApiKey);\u000a\u000a##Callback syntax\u000a\u000aCalls to the Hoist api are by nature asynchronous. All methods provided by the client library take a `success` callback (which will be called with the response passed as the first argument). an `error` callback (which will be called with an error message), and an optional value to be used as the `context` when these functions are called.\u000a\u000aThe raw XMLHttpRequest object is always passed as the second argument, if you're into that sort of thing.\u000a\u000aIn the api methods listed below, the argument list can be terminated with any of the following:\u000a\u000a- `success, error, context`\u000a- `success, error`\u000a- `success, context`\u000a- `success`\u000a- &#248;\u000a\u000aAny method that takes these callbacks will also return a Promises/A+ conforming promise. (If for some strange reason you are mixing these two conventions, the callback in the argument will be called before any callbacks attached to the promise.)\u000a\u000a##Identity\u000a\u000aUse `Hoist.status(…)` to check whether the user is logged in:\u000a\u000a\u0009Hoist.status(function (user) {\u000a\u0009\u0009console.log(\"Logged in as user with id \" user.id);\u000a\u0009}, function () {\u000a\u0009\u0009console.log(\"Truly I tell you, I do not know you.\");\u000a\u0009});\u000a\u000aTo log the user in or out or to create a new user, use the following, respectively:\u000a\u000a\u0009Hoist.login({ email: \"bob@invalid\", password: \"password\"}, …)\u000a\u0009Hoist.logout(…)\u000a\u0009Hoist.signup({ email: \"bob@invalid\", password: \"password\"}, …)\u000a\u000aAfter any of these methods has been successfully called, the library will remember the user object returned. This can be accessed by calling `Hoist.user()`.\u000a\u000a###Social Signup/Login\u000a####To sign up new users with Google / Facebook\u000a\u000aPOST /user\u000a\u0009{\"provider\" : \"facebook\" | \"google\" }\u000a\u000areturns\u000a\u000a\u0009{\"redirectUrl\": <some url> }\u000a\u000aYou should then redirect to that URL to complete the signup process; the user will then go to login / accept the\u000apermissions on the provider website (both services request access to the users Email Address).\u000a\u000aIf the user accepts the permissions then they will be redirected to the origin of the /user call with the query string ?create=true\u000aIf the user refuses, then it will redirect to the origin of the call with the query string ?create=false\u000a\u000aThey will be logged in on the return if successful\u000a\u000a####To login with Google / Facebook\u000a\u000aPOST /login\u000a\u000a\u0009{\"provider\" : \"facebook\" | \"google\" }\u000a\u000areturns\u000a\u000a\u0009{\"redirectUrl\": <some url> }\u000a\u000aYou should then redirect to that Url\u000a\u000aThe user will then go to login / accept the permissions on the provider (both request access to the users Email Address)\u000a\u000aIf the user accepts the permissions then they will be redirected to the origin of the /user call with the query string ?login=true\u000aIf the user refuses then it will redirect to the orgin of the call with the query string ?login=false\u000a\u000aNOTE: You are expected to redirect from the /login or /user in a timely fashion as the redirect contains a time sensitive token.\u000a\u000a##Data\u000a\u000aThe data methods can be used in two ways. A \"data manager\" can be created by passing a model type to the Hoist\u000afunction, and then the methods can be called on the resulting object:\u000a\u000a\u0009var projects = Hoist(\"project\");\u000a\u000a\u0009// get all projects\u000a\u000a\u0009projects.get(function (data) {\u000a\u0009\u0009console.log(\"Got \" + data.length + \" projects\");\u000a\u0009});\u000a\u000a\u0009// get a single project by id\u000a\u000a\u0009projects.get(projectId, function (data) {\u000a\u000a\u0009});\u000a\u000a\u0009// save an object; the object returned will have an _id parameter.\u000a\u0009// anything passed to this method with an _id parameter will overwrite\u000a\u0009// the object with the given id.\u000a\u000a\u0009// You can post multiple objects by passing an array instead.\u000a\u000a\u0009projects.post({\u000a\u0009\u0009name: \"Cool Project\",\u000a\u0009\u0009coolness: \"Very Cool\"\u000a\u0009}, function (data) {\u000a\u0009\u0009console.log(\"Project \" + data.name + \" has been saved with id \" + data._id);\u000a\u0009});\u000a\u000a\u0009// save an object by id\u000a\u000a\u0009projects.post(\"cool-project\", {\u000a\u0009\u0009name: \"Cool Project\",\u000a\u0009\u0009coolness: \"Super Cool\"\u000a\u0009});\u000a\u000a\u0009// delete all projects\u000a\u000a\u0009projects.clear(function () {\u000a\u0009\u0009console.log(\"No more projects.\");\u000a\u0009});\u000a\u000a\u0009// delete a single project\u000a\u000a\u0009projects.remove(\"cool-project\", function () {\u000a\u0009\u0009console.log(\"no more cool project.\");\u000a\u0009});\u000a\u000aA shorthand can be used if you have no need for the \"data manager\" pattern:\u000a\u000a\u0009Hoist.get(modelType, id, …)\u000a\u0009Hoist.post(modelType, id, data, …)\u000a\u0009Hoist.post(modelType, data, …)\u000a\u0009Hoist.clear(modelType, …)\u000a\u0009Hoist.remove(modelType, id, …)\u000a\u000a### Queries\u000a\u000aThe query represented by a data manager can be made more specific by using LINQ-style method chaining to add\u000awhere clauses, sorting and paging:\u000a\u000a\u0009Hoist(\"article\").limit(10).skip(50).get(…) // return at most 10 articles and skip the first 50\u000a\u0009Hoist(\"person\").sortBy(\"LastName\", \"FirstName asc\").thenBy(\"DateOfBirth desc\").get(…) // sort by properties\u000a\u0009Hoist(\"person\").where(\"LastName\").equals(\"Morrison\").get(…) // where clauses\u000a\u000aThe predicates supported in where clauses (like `equals` in the last example above) are as follows:\u000a\u000a- `equals`, `is` or `eq`: test equality\u000a- `notEquals`, `isnt`, `neq` or `ne`: not equal\u000a- `greaterThan` or `gt`: greater than\u000a- `atLeast`, `gte` or `ge`: greater than or equal\u000a- `lessThan` or `lt`: less than\u000a- `atMost`, `lte` or `le`: less than or equal\u000a- `elem` or `in`: test containment in an array\u000a- `notElem`, `notIn`, `nelem` or `nin`: test non-containment\u000a- `exists`: test property existence\u000a\u000aAt the moment the query manager object returned by these methods only supports the `get()` and `use()` methods.\u000a\u000a##File\u000a\u000aTo upload a file, call `Hoist.file(id, file, …)` with an id for the file, where `file` can be any of the following:\u000a\u000a- A `File` object\u000a- An HTML file input element\u000a- A jQuery wrapper HTML file input element\u000a- A `FormData` object (this must be in the format required by the Hoist api)\u000a\u000aTo retrieve a file, call `Hoist.file(id, …)`. The response will be a javascript `Blob` object.\u000a\u000a##Notifications\u000a\u000aTo send the notification with template id `id`, populated with the data `data`, use either of the following:\u000a\u000a\u0009Hoist.notify(id, data, …)\u000a\u0009Hoist.notify({id: id, data: data}, …)\u000a\u000a## Switching buckets\u000a\u000aHoist provides buckets to allow different members access to different data. When the member logs in, they\u000astart out in the default bucket. Use the following method to list the buckets the current member has access to.\u000a\u000a\u0009Hoist.bucket.list(…)\u000a\u000aUse one of the following to create a new bucket, with key `key` and attached metadata `meta`. The bucket created\u000awill be owned by the current user.\u000a\u000a\u0009Hoist.bucket.post(key, meta, …)\u000a\u0009Hoist.bucket(key, meta, …)\u000a\u000aTo update the metadata of the bucket with a given key, call the following:\u000a\u000a\u0009Hoist.bucket.meta(key, meta, …)\u000a\u000aTo set the current bucket, use one of\u000a\u000a\u0009Hoist.bucket.set(key, …)\u000a\u0009Hoist.bucket(key, …)\u000a\u000awhere `key` is the key for the bucket that you want to enter, or `null` for the default bucket.\u000a\u000aTo check what bucket the member is currently in, use one of the following. The `success` callback will be called\u000awith the current bucket if there is one; otherwise the `error` callback will be called.\u000a\u000a\u0009Hoist.bucket.status(…)\u000a\u0009Hoist.bucket(…)\u000a\u000aOnce you're in a bucket, you can use the following to set the metadata of the current bucket.\u000a\u000a\u0009Hoist.bucket(meta, …)\u000a\u000aAfter the bucket is set or the status is checked, the library will remember the current bucket with its metadata.\u000aYou can simply call `Hoist.bucket()` to get it. (Note that calling `Hoist.bucket()` without arguments does not return a promised call to get the bucket status. You must use the long form `Hoist.bucket.status()` in this case.)\u000a\u000aFinally, to invite a user to the current bucket, do:\u000a\u000a\u0009Hoist.bucket.invite({ \"email\": \"boris@daspem.com\" }, …)\u000a\u000aMany times it doesn't make sense to rely on state on the server to remember which bucket you're in. To get a\u000aHoist data manager whose calls are always scoped to a given bucket, use the `use()` method as in the following:\u000a\u000a\u0009var bucketHoist = Hoist.use(\"my-bucket-key\");\u000a\u000a\u0009bucketHoist.get(…); // works as above for Hoist.get\u000a\u0009bucketHoist.post(…);\u000a\u0009bucketHoist.clear(…);\u000a\u0009bucketHoist.remove(…);\u000a\u000a\u0009bucketHoist.meta(data, …); // post metadata against this bucket\u000a\u0009bucketHoist.enter(…);\u000a\u000a\u0009var modelTypeManager = Hoist(\"model-type\").use(\"bucket-key\"); // or bucketHoist(\"model-type\");\u000a\u000a\u0009modelTypeManager.get(…); // work as above for data managers\u000a\u0009modelTypeManager.post(…);\u000a\u0009modelTypeManager.clear(…);\u000a\u0009modelTypeManager.remove(…);\u000a\u000a## Aggregating data calls\u000a\u000aIf your project is of a decent size, you will probably find that on page load you are getting a bunch of models of\u000adifferent types in a fairly straightforward fashion. Instead of nesting a bunch of callbacks, you can provide the\u000a`Hoist` function with a hash instead of a model type. For example, if you want to load all models of type \"article\"\u000aand \"section\", you can use:\u000a\u000a\u0009Hoist({\u000a\u0009\u0009articles: \"article\",\u000a\u0009\u0009sections: \"section\"\u000a\u0009}).get(function (data) {\u000a\u0009\u0009doArticleStuff(data.articles);\u000a\u0009\u0009doSectionStuff(data.sections);\u000a\u0009});\u000a\u000aSingle models can be retrieved in this way by setting the value in the hash to be the model type and the model id,s\u000aeparated by a space:\u000a\u000a\u0009Hoist.get({\u000a\u0009\u0009membership: \"membership 63688436-9bd4-4fc6-8c2c-ab3398ec2961\",\u000a\u0009\u0009companies: \"company\"\u000a\u0009}, function (data) {\u000a\u0009\u0009// do the things\u000a\u0009});\u000a\u000aIf the type or id of one model being retrieved depends on the property of another, use square brackets to indicate\u000athese dependencies, and the library will make sure to request the data in the right order, then swap out the tags\u000abefore making the calls. You can also provide a string (accessible as `[id]`) or hash (accessible through its\u000aproperty names) as the first argument of the `get(…)` function as additional context. This allows things like:\u000a\u000a\u0009var allData = Hoist({\u000a\u0009\u0009membership: \"membership [id]\",\u000a\u0009\u0009company: \"company [membership.companyId]\",\u000a\u0009\u0009employees: \"[company._id]-employee\"\u000a\u0009});\u000a\u000a\u0009Hoist.status(function (user) {\u000a\u0009\u0009allData.get(user, function (data) {\u000a\u0009\u0009  // do the things\u000a\u0009\u0009});\u000a\u0009});\u000a","readmeFilename":"README.md","_id":"hoist-js@0.0.7-pre","_shasum":"6b379bd95c8977fe0a56092d7035239432b07891","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"buildmaster","email":"owen@iouk.com"},"maintainers":[{"name":"buildmaster","email":"owen@iouk.com"}],"dist":{"shasum":"6b379bd95c8977fe0a56092d7035239432b07891","tarball":"http://registry.npmjs.org/hoist-js/-/hoist-js-0.0.7-pre.tgz"}}: hoist-js
71 error     at RegClient.<anonymous> (/Users/owen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:273:14)
71 error     at Request._callback (/Users/owen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:211:65)
71 error     at Request.self.callback (/Users/owen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/request/request.js:123:22)
71 error     at Request.EventEmitter.emit (events.js:98:17)
71 error     at Request.<anonymous> (/Users/owen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/request/request.js:893:14)
71 error     at Request.EventEmitter.emit (events.js:117:20)
71 error     at IncomingMessage.<anonymous> (/Users/owen/.nvm/v0.10.28/lib/node_modules/npm/node_modules/request/request.js:844:12)
71 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
71 error     at _stream_readable.js:919:16
71 error     at process._tickCallback (node.js:419:13)
72 error If you need help, you may report this *entire* log,
72 error including the npm and node versions, at:
72 error     <http://github.com/npm/npm/issues>
73 error System Darwin 14.0.0
74 error command "/Users/owen/.nvm/v0.10.28/bin/node" "/Users/owen/.nvm/v0.10.28/bin/npm" "publish"
75 error cwd /Volumes/Store/Projects/hoist/hoist-js
76 error node -v v0.10.28
77 error npm -v 1.4.9
78 verbose exit [ 1, true ]
